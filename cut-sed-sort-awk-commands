The cut command:
----------------

• Cuts sections from lines of text by character, byte position, or delimiter
• Displays that information to standard output
• Can be used to pull relevant information out of text files and display that information to you
• Output can be piped to a new file


The cut command requires the user to specify bytes, fields, or characters to extract.
When using a field, you must specify the delimiter of the file.
Command options are listed as follows. -b: Byte -c: Column -f: Field -d: Delimiter Examples are as follows. 

• cut -d ',' -f 1 names.cvs: Extracts the first field of each record. The separator is the comma (,).
• cut –c 1-2 names.csv: Extracts the first two characters of each line. 
• cut –b 1-5 names.csv: Extracts the first five bytes of each line. Depending on the encoding, one letter can be encoded by using one or more bytes.
The b and c options can also be used with lists. 
• cut –c 1,6,7 names.csv: Extracts the characters 1, 6, and 7 of each record.

Or you can use it as follows: 
• cut -c 4-names.csv: Extracts from characters 4 to the end. 
• cut –c -3 names.csv: Extracts from the first character to the third character of each record.


The sed command:
----------------

• A non-interactive text editor 
• Edits data based on the rules that are provided (can insert, delete, search, and replace)
• Supports regular expression

The examples in the screenshot are equivalent.
The first takes the echo output as an input (use of the pipe redirector |), and the second works on a file.
sed 's/page/website/' example.txt replaces page occurrences with website in the example.txt file.
(It takes the content of the file as input but does not save the file.)

By default, sed replaces only the first occurrence on each line.
You can use /n to replace the nth occurrence; sed 's/page/website/5' example.txt replaces the fifth occurrence.
You can use /g to replace all occurrences.
You can use other options to do more advanced text manipulations (delete and replace strings on ranges of lines).


The sort command:
-----------------

• Sorts file contents in a specified order: alphabetical, reverse order, number, or month
• Examples:
• sort file.txt: Outputs lines in alphabetical order 
• sort -r file.txt: Outputs lines in reverse alphabetical order 
• sort -u file.txt: Removes duplicate entries (useful for log files) 
• sort -M file.txt: Outputs lines in order of month

By default, the entire line is taken as a sort key:
• Lines that begin with a number will appear first. 
• Lines that begin with an a appear before lines that begin with other letters. 
• Lines that begin in lowercase appear before lines that begin in uppercase. 
• -o outputs the result to a file (sort file.txt –o sortedfile.txt is like sort file.txt > sortedfile.txt)
• -r sorts in reverser order 
• -n sorts numerically if the file contains numbers 
• -k sorts according to the kth column (if the file is formatted as a table ) 
• -u removes duplicates 
• -c tells whether a file is already sorted



The awk command:
----------------

• Is used to write small programs to transform data
• Defines variables • Uses string and arithmetic operators 
• Uses control flow and loops 
• Generates formatted reports
• Syntax: Two ways to invoke awk – one with an explicit program, one with the program in a file – awk option –f program-file input-file – awk option 'program' input-file
• Options:
-F fs To specify a field separator (the default separator any number of spaces or tab)
-f source-file To specify a file that contains awk script
-v var=value To declare a variable

The awk command does not require compiling.
It is aimed at writing small programs.
The name comes from the names of the three developers: Aho, Weinberger, and Kernighan.

• awk is used as follows: awk options 'program' inputFile 
• program can be in the form {action} 
• awk –F , '{ print $3 }' customers.txt 
• The field separator is a comma (,) 
• The program is print $3: Prints the third field on each record in the teams.txt file
• awk –F @ ‘{print $1}’ customers.txt 
• The field separator is @ so the first field becomes everything that is before that @ instead of the first name as before
• program can also be in the form select_record_or_field {action} 
• The program can use a regular expression to match records or rules against specific rules: 
• awk options ' /regexp/ { action}' 
• For example: awk -F , '/[0-9][0-9]/ {print $1 }' names.csv selects lines that contain a two-digit number. For this reason, the last line of the file is filtered out.
• awk -F , '$2 > 35 {print $1}' names.csv selects only records for which the second field is > 35 : Alejandro Rosalez
• awk can use a special pattern to perform actions before and after record is processed: 
• awk 'BEGIN { print "Start Processing." }; { print $1 }; END { print “Done ! :]" }' names.csv
• This program prints Start Processing, then displays the first field of each record, and finally displays Done!:]
